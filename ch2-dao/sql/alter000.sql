/* Formatted on 26/09/2014 12:54:50 (QP5 v5.256.13226.35510) */
-- developer : Lukasz Kalamlacki
-- CH-282 / Setting up new ContentHub 2.0 database, DDL statements

--  Sql Start
--spool CH-DevEnv-export.log

PROMPT
PROMPT Creating table USERS
PROMPT ====================
PROMPT

CREATE TABLE USERS
(
   TYPE          VARCHAR2 (31 CHAR) NOT NULL,
   ID            NUMBER (19) NOT NULL,
   VERSION       NUMBER (19),
   EMAIL         VARCHAR2 (200 CHAR),
   ENABLED       NUMBER (1) NOT NULL,
   USERNAME      VARCHAR2 (40 CHAR) NOT NULL,
   ADDRESS       VARCHAR2 (200 CHAR),
   TOKEN         VARCHAR2 (40 CHAR),
   CNT_LOG_ERR   NUMBER (10),
   FIRST_LOG     NUMBER (1),
   PASSWORD      VARCHAR2 (32 CHAR)
);

ALTER TABLE USERS ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE USERS ADD CONSTRAINT UK_USERS_TOKEN UNIQUE (TOKEN) USING INDEX;
ALTER TABLE USERS ADD CONSTRAINT UK_USERS_USERNAME UNIQUE (USERNAME) USING INDEX;

CREATE INDEX IDX_EMAIL
   ON USERS (EMAIL);

CREATE INDEX IDX_TYPE
   ON USERS (TYPE);

CREATE INDEX IDX_ADDRESS
   ON USERS (ADDRESS);

PROMPT
PROMPT Creating table AUTHORITY
PROMPT ========================
PROMPT

CREATE TABLE AUTHORITY
(
   ID          NUMBER (19) NOT NULL,
   VERSION     NUMBER (19),
   AUTHORITY   VARCHAR2 (40 CHAR) NOT NULL,
   USER_ID     NUMBER (19)
);

ALTER TABLE AUTHORITY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE AUTHORITY ADD CONSTRAINT FK_AUTHORITY_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID);

CREATE INDEX IDX_AUTHORITY
   ON AUTHORITY (AUTHORITY);

PROMPT
PROMPT Creating table BRAND
PROMPT ====================
PROMPT

CREATE TABLE BRAND
(
   ID           NUMBER (19) NOT NULL,
   VERSION      NUMBER (19),
   BRAND_NAME   VARCHAR2 (30 CHAR) NOT NULL,
   CODE         VARCHAR2 (2 CHAR) NOT NULL
);

ALTER TABLE BRAND ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE BRAND ADD CONSTRAINT UK_BRAND_CODE UNIQUE (CODE) USING INDEX;

CREATE INDEX IDX_BRAND_NAME
   ON BRAND (BRAND_NAME);


PROMPT
PROMPT Creating table CONTENT_REPOSITORY
PROMPT =================================
PROMPT

CREATE TABLE CONTENT_REPOSITORY
(
   ID                           NUMBER (19) NOT NULL,
   VERSION                      NUMBER (19),
   CATALOGUED_TOUR_CODE         VARCHAR2 (10 CHAR),
   IS_TOURDEPARTURE_AVAILABLE   NUMBER (1) NOT NULL,
   IS_TOURINFO_AVAILABLE        NUMBER (1) NOT NULL,
   OLD_TOURDEPARTURE_XML_SIZE   NUMBER (19),
   OLD_TOURINFO_XML_SIZE        NUMBER (19),
   REPOSITORY_STATUS            VARCHAR2 (255 CHAR) NOT NULL,
   STATUS                       VARCHAR2 (255 CHAR) NOT NULL,
   TD_FILENAME                  VARCHAR2 (255 CHAR),
   TI_FILENAME                  VARCHAR2 (255 CHAR),
   TOUR_CODE                    VARCHAR2 (10 CHAR),
   TOURDEPARTURE_MODIFIED       TIMESTAMP (6),
   TOURDEPARTURE_XML_MD5        VARCHAR2 (32 CHAR),
   TOURDEPARTURE_XML_SIZE       NUMBER (19),
   TOURINFO_MODIFIED            TIMESTAMP (6),
   TOURINFO_XML_MD5             VARCHAR2 (32 CHAR),
   TOURINFO_XML_SIZE            NUMBER (19),
   TOURINFO_SOURCE              VARCHAR2 (8 CHAR) NOT NULL
);

ALTER TABLE CONTENT_REPOSITORY ADD PRIMARY KEY (ID) USING INDEX;

CREATE INDEX CR_IDX_REPOSITORYSTATUS
   ON CONTENT_REPOSITORY (REPOSITORY_STATUS);

CREATE INDEX CR_IDX_STATUS
   ON CONTENT_REPOSITORY (STATUS);

CREATE INDEX CR_IDX_TOUR_CODE
   ON CONTENT_REPOSITORY (TOUR_CODE);

CREATE INDEX CR_IDX_TD_MD5
   ON CONTENT_REPOSITORY (TOURDEPARTURE_XML_MD5);

CREATE INDEX CR_IDX_TI_MD5
   ON CONTENT_REPOSITORY (TOURINFO_XML_MD5);

CREATE INDEX CR_IDX_TI_AVAILABLE
   ON CONTENT_REPOSITORY (IS_TOURINFO_AVAILABLE);

CREATE INDEX CR_IDX_TD_AVAILABLE
   ON CONTENT_REPOSITORY (IS_TOURDEPARTURE_AVAILABLE);

PROMPT
PROMPT Creating table BRAND_CONTENT
PROMPT ============================
PROMPT

CREATE TABLE BRAND_CONTENT
(
   CONTENT_ID   NUMBER (19) NOT NULL,
   BRAND_ID     NUMBER (19) NOT NULL
);

ALTER TABLE BRAND_CONTENT ADD PRIMARY KEY (CONTENT_ID, BRAND_ID) USING INDEX;
ALTER TABLE BRAND_CONTENT ADD CONSTRAINT FK_BRAND_CONTENT_CONTENT_ID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT_REPOSITORY (ID);
ALTER TABLE BRAND_CONTENT ADD CONSTRAINT FK_BRAND_CONTENT_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_BC_BRAND_ID
   ON BRAND_CONTENT (BRAND_ID);

CREATE INDEX IDX_BC_CONTENT_ID
   ON BRAND_CONTENT (CONTENT_ID);

PROMPT
PROMPT Creating table BRAND_LOCK
PROMPT =========================
PROMPT

CREATE TABLE BRAND_LOCK
(
   ID              NUMBER (19) NOT NULL,
   VERSION         NUMBER (19),
   BRAND_CODE      VARCHAR2 (2 CHAR) NOT NULL,
   PROCCESS_NAME   VARCHAR2 (50 CHAR) NOT NULL
);

ALTER TABLE BRAND_LOCK ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE BRAND_LOCK ADD CONSTRAINT UK_BRAND_LOCK_BRAND_CODE UNIQUE (BRAND_CODE) USING INDEX;

CREATE INDEX IDX_PROCCESS_NAME
   ON BRAND_LOCK (PROCCESS_NAME);

PROMPT
PROMPT Creating table FUNCTION
PROMPT =======================
PROMPT

CREATE TABLE FUNCTION
(
   ID        NUMBER (19) NOT NULL,
   VERSION   NUMBER (19),
   INFO      VARCHAR2 (250 CHAR),
   NAME      VARCHAR2 (60 CHAR) NOT NULL
);

ALTER TABLE FUNCTION ADD PRIMARY KEY (ID) USING INDEX;

CREATE INDEX IDX_INFO
   ON FUNCTION (INFO);

CREATE INDEX IDX_NAME
   ON FUNCTION (NAME);

PROMPT
PROMPT Creating table SELLING_COMPANY
PROMPT ==============================
PROMPT

CREATE TABLE SELLING_COMPANY
(
   ID         NUMBER (19) NOT NULL,
   VERSION    NUMBER (19),
   CODE       VARCHAR2 (10 CHAR) NOT NULL,
   NAME       VARCHAR2 (60 CHAR) NOT NULL,
   BRAND_ID   NUMBER (19)
);

ALTER TABLE SELLING_COMPANY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE SELLING_COMPANY ADD CONSTRAINT UK_SELLING_COMPANY_CODE UNIQUE (CODE) USING INDEX;
ALTER TABLE SELLING_COMPANY ADD CONSTRAINT FK_SELLING_COMPANY_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_SC_NAME
   ON SELLING_COMPANY (NAME);

CREATE INDEX IDX_SC_BRAND_ID
   ON SELLING_COMPANY (BRAND_ID);


PROMPT
PROMPT Creating table CCAPI_AUTHORITY
PROMPT ==============================
PROMPT

CREATE TABLE CCAPI_AUTHORITY
(
   ID            NUMBER (19) NOT NULL,
   VERSION       NUMBER (19),
   FUNCTION_ID   NUMBER (19),
   COMPANY_ID    NUMBER (19),
   USER_ID       NUMBER (19)
);

ALTER TABLE CCAPI_AUTHORITY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE CCAPI_AUTHORITY ADD CONSTRAINT FK_CCAPI_AUTHORITY_FUNCTION_ID FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTION (ID);
ALTER TABLE CCAPI_AUTHORITY ADD CONSTRAINT FK_CCAPI_AUTHORITY_COMPANY_ID FOREIGN KEY (COMPANY_ID) REFERENCES SELLING_COMPANY (ID);
ALTER TABLE CCAPI_AUTHORITY ADD CONSTRAINT FK_CCAPI_AUTHORITY_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID);

CREATE INDEX IDX_CA_FUNCTION_ID
   ON CCAPI_AUTHORITY (FUNCTION_ID);

CREATE INDEX IDX_CA_COMPANY_ID
   ON CCAPI_AUTHORITY (COMPANY_ID);

CREATE INDEX IDX_CA_USER_ID
   ON CCAPI_AUTHORITY (USER_ID);



PROMPT
PROMPT Creating table CREXPORT
PROMPT =======================
PROMPT

CREATE TABLE CREXPORT
(
   ID            NUMBER (19) NOT NULL,
   VERSION       NUMBER (19),
   DATE_EXPORT   DATE NOT NULL,
   MODIFIED_BY   VARCHAR2 (60 CHAR) NOT NULL,
   NAME          VARCHAR2 (60 CHAR) NOT NULL,
   FILE_STATUS   VARCHAR2 (255 CHAR) NOT NULL
);

ALTER TABLE CREXPORT ADD PRIMARY KEY (ID) USING INDEX;

PROMPT
PROMPT Creating table QUARTZ_JOB
PROMPT =========================
PROMPT

CREATE TABLE QUARTZ_JOB
(
   ID                 NUMBER (19) NOT NULL,
   VERSION            NUMBER (19),
   BRAND_CODE         VARCHAR2 (255 CHAR),
   CRON_EXPRESION     VARCHAR2 (255 CHAR),
   GROUP_NAME         VARCHAR2 (60 CHAR),
   JOB_NAME           VARCHAR2 (60 CHAR) NOT NULL,
   JOB_STATUS         VARCHAR2 (255 CHAR) NOT NULL,
   NEXT_FIRING_TIME   TIMESTAMP (6)
);

ALTER TABLE QUARTZ_JOB ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE QUARTZ_JOB ADD CONSTRAINT UK_QUARTZ_JOB_JOB_NAME UNIQUE (JOB_NAME) USING INDEX;

CREATE INDEX IDX_QJ_BRAND_CODE
   ON QUARTZ_JOB (BRAND_CODE);

CREATE INDEX IDX_QJ_JOB_STATUS
   ON QUARTZ_JOB (JOB_STATUS);


--This is not required as this column already has a unique index created above.
--CREATE INDEX IDX_QJ_JOB_NAME
--   ON QUARTZ_JOB (JOB_NAME);

PROMPT
PROMPT Creating table QUARTZ_JOB_HISTORY
PROMPT =================================
PROMPT

CREATE TABLE QUARTZ_JOB_HISTORY
(
   ID                   NUMBER (19) NOT NULL,
   VERSION              NUMBER (19),
   EXECUTED_BY          VARCHAR2 (40 CHAR) NOT NULL,
   EXECUTION_TIME       NUMBER (19),
   START_DATE           TIMESTAMP (6) NOT NULL,
   JOB_HISTORY_STATUS   VARCHAR2 (255 CHAR) NOT NULL,
   QUARTZ_JOB_ID        NUMBER (19)
);

ALTER TABLE QUARTZ_JOB_HISTORY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE QUARTZ_JOB_HISTORY ADD CONSTRAINT FK_QUARTZ_JOB_HISTORY_QJ_ID FOREIGN KEY (QUARTZ_JOB_ID) REFERENCES QUARTZ_JOB (ID);

CREATE INDEX IDX_QJH_JOB_HISTORY_STATUS
   ON QUARTZ_JOB_HISTORY (JOB_HISTORY_STATUS);

CREATE INDEX IDX_QJH_START_DATE
   ON QUARTZ_JOB_HISTORY (START_DATE);

CREATE INDEX IDX_QJH_QUARTZ_JOB_ID
   ON QUARTZ_JOB_HISTORY (QUARTZ_JOB_ID);



PROMPT
PROMPT Creating table TOURDEPARTURE_HISTORY
PROMPT ====================================
PROMPT

CREATE TABLE TOURDEPARTURE_HISTORY
(
   ID                     NUMBER (19) NOT NULL,
   VERSION                NUMBER (19),
   IMPORTED_COUNT         NUMBER (10),
   MODIFIED_BY            VARCHAR2 (40 CHAR) NOT NULL,
   OPERATION_END          TIMESTAMP (6),
   OPERATION_START        TIMESTAMP (6),
   TOURDEPARTURE_STATUS   VARCHAR2 (255 CHAR) NOT NULL,
   UPDATED_COUNT          NUMBER (10),
   QJHISTORY_ID           NUMBER (19)
);

ALTER TABLE TOURDEPARTURE_HISTORY ADD PRIMARY KEY (ID) USING INDEX;

CREATE INDEX IDX_TD_QJHISTORY_ID
   ON TOURDEPARTURE_HISTORY (QJHISTORY_ID);


PROMPT
PROMPT Creating table TOURINFO_HISTORY
PROMPT ===============================
PROMPT

CREATE TABLE TOURINFO_HISTORY
(
   ID            NUMBER (19) NOT NULL,
   VERSION       NUMBER (19),
   DATE_UPLOAD   TIMESTAMP (6) NOT NULL,
   NAME          VARCHAR2 (60 CHAR) NOT NULL,
   PATH          VARCHAR2 (255 CHAR),
   FILE_SOURCE   VARCHAR2 (255 CHAR) NOT NULL,
   FILE_STATUS   VARCHAR2 (255 CHAR) NOT NULL,
   BRAND_ID      NUMBER (19)
);

ALTER TABLE TOURINFO_HISTORY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE TOURINFO_HISTORY ADD CONSTRAINT FK_TOURINFO_HISTORY_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_TI_DATE_UPLOAD
   ON TOURINFO_HISTORY (DATE_UPLOAD);

CREATE INDEX IDX_TI_FILE_STATUS
   ON TOURINFO_HISTORY (FILE_STATUS);

CREATE INDEX IDX_TI_FILE_SOURCE
   ON TOURINFO_HISTORY (FILE_SOURCE);

CREATE INDEX IDX_TI_BRAND_ID
   ON TOURINFO_HISTORY (BRAND_ID);

PROMPT
PROMPT Creating table COMMENTS
PROMPT =======================
PROMPT

CREATE TABLE COMMENTS
(
   TYPE            VARCHAR2 (31 CHAR) NOT NULL,
   ID              NUMBER (19) NOT NULL,
   VERSION         NUMBER (19),
   CONTENT         CLOB,
   MESSAGE         VARCHAR2 (4000 CHAR) NOT NULL,
   CODE            VARCHAR2 (15 CHAR),
   MODIFIED_BY     VARCHAR2 (40 CHAR) NOT NULL,
   MODIFIED_TIME   TIMESTAMP (6) NOT NULL,
   STACK_TRACE     CLOB,
   TIHISTORY_ID    NUMBER (19),
   TDHISTORY_ID    NUMBER (19),
   QJHISTORY_ID    NUMBER (19),
   CREXPORT_ID     NUMBER (19)
);

ALTER TABLE COMMENTS ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_CREXPORT_ID FOREIGN KEY (CREXPORT_ID) REFERENCES CREXPORT (ID);
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_QJHISTORY_ID FOREIGN KEY (QJHISTORY_ID) REFERENCES QUARTZ_JOB_HISTORY (ID);
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_TIHISTORY_ID FOREIGN KEY (TIHISTORY_ID) REFERENCES TOURINFO_HISTORY (ID);
ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_TDHISTORY_ID FOREIGN KEY (TDHISTORY_ID) REFERENCES TOURDEPARTURE_HISTORY (ID);

CREATE INDEX IDX_COM_TIHISTORY_ID
   ON COMMENTS (TIHISTORY_ID);

CREATE INDEX IDX_COM_TDHISTORY_ID
   ON COMMENTS (TDHISTORY_ID);

CREATE INDEX IDX_COM_QJHISTORY_ID
   ON COMMENTS (QJHISTORY_ID);

CREATE INDEX IDX_COM_TYPE
   ON COMMENTS (TYPE);

CREATE INDEX IDX_COM_CODE
   ON COMMENTS (CODE);

CREATE INDEX IDX_COM_MODIFIED_TIME
   ON COMMENTS (MODIFIED_TIME);

PROMPT
PROMPT Creating table CREXPORT_CONTENT
PROMPT ===============================
PROMPT

CREATE TABLE CREXPORT_CONTENT
(
   CREXPORT_ID   NUMBER (19) NOT NULL,
   CONTENT_ID    NUMBER (19) NOT NULL
);

ALTER TABLE CREXPORT_CONTENT ADD PRIMARY KEY (CREXPORT_ID, CONTENT_ID) USING INDEX;
ALTER TABLE CREXPORT_CONTENT ADD CONSTRAINT FK_CREXPORT_CONTENT_CONTENT_ID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT_REPOSITORY (ID);
ALTER TABLE CREXPORT_CONTENT ADD CONSTRAINT FK_CREXPORT_CONTENT_CRE_ID FOREIGN KEY (CREXPORT_ID) REFERENCES CREXPORT (ID);

PROMPT
PROMPT Creating table EMAIL_ADDRESS
PROMPT ============================
PROMPT

CREATE TABLE EMAIL_ADDRESS
(
   ID             NUMBER (19) NOT NULL,
   VERSION        NUMBER (19),
   ADDRESS_TEXT   VARCHAR2 (255 CHAR) NOT NULL,
   ADDRESS_TYPE   VARCHAR2 (255 CHAR) NOT NULL,
   BRAND_ID       NUMBER (19) NOT NULL
);

ALTER TABLE EMAIL_ADDRESS ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE EMAIL_ADDRESS ADD CONSTRAINT FK_EMAIL_ADDRESS_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_EMA_ADDRESS_TYPE
   ON EMAIL_ADDRESS (ADDRESS_TYPE);

CREATE INDEX IDX_EMA_BRAND_ID
   ON EMAIL_ADDRESS (BRAND_ID);

PROMPT
PROMPT Creating table EMAIL_HISTORY
PROMPT ============================
PROMPT

CREATE TABLE EMAIL_HISTORY
(
   ID                      NUMBER (19) NOT NULL,
   VERSION                 NUMBER (19),
   EMAIL_FROM              VARCHAR2 (200 CHAR) NOT NULL,
   MESSAGE                 CLOB NOT NULL,
   MESSAGE_DELIVERY_TIME   TIMESTAMP (6),
   PROCCESS_NAME           VARCHAR2 (50 CHAR) NOT NULL,
   STATUS                  VARCHAR2 (255 CHAR) NOT NULL,
   SUBJECT                 VARCHAR2 (255 CHAR) NOT NULL,
   EMAIL_TO                VARCHAR2 (200 CHAR) NOT NULL
);

ALTER TABLE EMAIL_HISTORY ADD PRIMARY KEY (ID) USING INDEX;

CREATE INDEX IDX_EMH_PROCCESS_NAME
   ON EMAIL_HISTORY (PROCCESS_NAME);

CREATE INDEX IDX_EMH_STATUS
   ON EMAIL_HISTORY (STATUS);

CREATE INDEX IDX_EMH_SUBJECT
   ON EMAIL_HISTORY (SUBJECT);

CREATE INDEX IDX_EMH_MESSAGE_DELIVERY_TIME
   ON EMAIL_HISTORY (MESSAGE_DELIVERY_TIME);

PROMPT
PROMPT Creating table GROUPS
PROMPT =====================
PROMPT

CREATE TABLE GROUPS
(
   ID           NUMBER (19) NOT NULL,
   VERSION      NUMBER (19),
   GROUP_NAME   VARCHAR2 (40 CHAR) NOT NULL
);

ALTER TABLE GROUPS ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE GROUPS ADD CONSTRAINT UK_GROUPS_GROUP_NAME UNIQUE (GROUP_NAME) USING INDEX;

PROMPT
PROMPT Creating table GROUP_AUTHORITIES
PROMPT ================================
PROMPT

CREATE TABLE GROUP_AUTHORITIES
(
   ID          NUMBER (19) NOT NULL,
   VERSION     NUMBER (19),
   AUTHORITY   VARCHAR2 (255 CHAR) NOT NULL,
   GROUP_ID    NUMBER (19)
);

ALTER TABLE GROUP_AUTHORITIES ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE GROUP_AUTHORITIES ADD CONSTRAINT FK_GROUP_AUTHORITIES_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (ID);

PROMPT
PROMPT Creating table GROUP_MEMBERS
PROMPT ============================
PROMPT

CREATE TABLE GROUP_MEMBERS
(
   USER_ID    NUMBER (19) NOT NULL,
   GROUP_ID   NUMBER (19) NOT NULL
);

ALTER TABLE GROUP_MEMBERS ADD PRIMARY KEY (USER_ID, GROUP_ID) USING INDEX;
ALTER TABLE GROUP_MEMBERS ADD CONSTRAINT FK_GROUP_MEMBERS_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (ID);
ALTER TABLE GROUP_MEMBERS ADD CONSTRAINT FK_GROUP_MEMBERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID);

PROMPT QUARTZ table Start
PROMPT Creating table QRTZ_JOB_DETAILS
PROMPT ===============================
PROMPT

CREATE TABLE QRTZ_JOB_DETAILS
(
   JOB_NAME            VARCHAR2 (200) NOT NULL,
   JOB_GROUP           VARCHAR2 (200) NOT NULL,
   DESCRIPTION         VARCHAR2 (250),
   JOB_CLASS_NAME      VARCHAR2 (250) NOT NULL,
   IS_DURABLE          VARCHAR2 (1) NOT NULL,
   IS_VOLATILE         VARCHAR2 (1) NOT NULL,
   IS_STATEFUL         VARCHAR2 (1) NOT NULL,
   REQUESTS_RECOVERY   VARCHAR2 (1) NOT NULL,
   JOB_DATA            BLOB
);

ALTER TABLE QRTZ_JOB_DETAILS
  ADD PRIMARY KEY (JOB_NAME, JOB_GROUP)
  USING INDEX;

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY
   ON QRTZ_JOB_DETAILS (REQUESTS_RECOVERY);

PROMPT
PROMPT Creating table QRTZ_TRIGGERS
PROMPT ============================
PROMPT

CREATE TABLE QRTZ_TRIGGERS
(
   TRIGGER_NAME     VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP    VARCHAR2 (200) NOT NULL,
   JOB_NAME         VARCHAR2 (200) NOT NULL,
   JOB_GROUP        VARCHAR2 (200) NOT NULL,
   IS_VOLATILE      VARCHAR2 (1) NOT NULL,
   DESCRIPTION      VARCHAR2 (250),
   NEXT_FIRE_TIME   NUMBER (13),
   PREV_FIRE_TIME   NUMBER (13),
   PRIORITY         NUMBER (13),
   TRIGGER_STATE    VARCHAR2 (16) NOT NULL,
   TRIGGER_TYPE     VARCHAR2 (8) NOT NULL,
   START_TIME       NUMBER (13) NOT NULL,
   END_TIME         NUMBER (13),
   CALENDAR_NAME    VARCHAR2 (200),
   MISFIRE_INSTR    NUMBER (2),
   JOB_DATA         BLOB
);

ALTER TABLE QRTZ_TRIGGERS
  ADD PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP)
  USING INDEX;
ALTER TABLE QRTZ_TRIGGERS
  ADD FOREIGN KEY (JOB_NAME, JOB_GROUP)
  REFERENCES QRTZ_JOB_DETAILS (JOB_NAME, JOB_GROUP);

CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME
   ON QRTZ_TRIGGERS (NEXT_FIRE_TIME);

CREATE INDEX IDX_QRTZ_T_NFT_ST
   ON QRTZ_TRIGGERS (NEXT_FIRE_TIME, TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_T_STATE
   ON QRTZ_TRIGGERS (TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_T_VOLATILE
   ON QRTZ_TRIGGERS (IS_VOLATILE);

PROMPT
PROMPT Creating table QRTZ_BLOB_TRIGGERS
PROMPT =================================
PROMPT

CREATE TABLE QRTZ_BLOB_TRIGGERS
(
   TRIGGER_NAME    VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP   VARCHAR2 (200) NOT NULL,
   BLOB_DATA       BLOB
);

ALTER TABLE QRTZ_BLOB_TRIGGERS
  ADD PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP)
  USING INDEX;
ALTER TABLE QRTZ_BLOB_TRIGGERS
  ADD FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
  REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME, TRIGGER_GROUP);

PROMPT
PROMPT Creating table QRTZ_CALENDARS
PROMPT =============================
PROMPT

CREATE TABLE QRTZ_CALENDARS
(
   CALENDAR_NAME   VARCHAR2 (200) NOT NULL,
   CALENDAR        BLOB NOT NULL
);

ALTER TABLE QRTZ_CALENDARS
  ADD PRIMARY KEY (CALENDAR_NAME)
  USING INDEX;

PROMPT
PROMPT Creating table QRTZ_CRON_TRIGGERS
PROMPT =================================
PROMPT

CREATE TABLE QRTZ_CRON_TRIGGERS
(
   TRIGGER_NAME      VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP     VARCHAR2 (200) NOT NULL,
   CRON_EXPRESSION   VARCHAR2 (120) NOT NULL,
   TIME_ZONE_ID      VARCHAR2 (80)
);

ALTER TABLE QRTZ_CRON_TRIGGERS
  ADD PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP)
  USING INDEX;
ALTER TABLE QRTZ_CRON_TRIGGERS
  ADD FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
  REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME, TRIGGER_GROUP);

PROMPT
PROMPT Creating table QRTZ_FIRED_TRIGGERS
PROMPT ==================================
PROMPT

CREATE TABLE QRTZ_FIRED_TRIGGERS
(
   ENTRY_ID            VARCHAR2 (95) NOT NULL,
   TRIGGER_NAME        VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP       VARCHAR2 (200) NOT NULL,
   IS_VOLATILE         VARCHAR2 (1) NOT NULL,
   INSTANCE_NAME       VARCHAR2 (200) NOT NULL,
   FIRED_TIME          NUMBER (13) NOT NULL,
   PRIORITY            NUMBER (13) NOT NULL,
   STATE               VARCHAR2 (16) NOT NULL,
   JOB_NAME            VARCHAR2 (200),
   JOB_GROUP           VARCHAR2 (200),
   IS_STATEFUL         VARCHAR2 (1),
   REQUESTS_RECOVERY   VARCHAR2 (1)
);

ALTER TABLE QRTZ_FIRED_TRIGGERS
  ADD PRIMARY KEY (ENTRY_ID)
  USING INDEX;

CREATE INDEX IDX_QRTZ_FT_JOB_GROUP
   ON QRTZ_FIRED_TRIGGERS (JOB_GROUP);

CREATE INDEX IDX_QRTZ_FT_JOB_NAME
   ON QRTZ_FIRED_TRIGGERS (JOB_NAME);

CREATE INDEX IDX_QRTZ_FT_JOB_REQ_RECOVERY
   ON QRTZ_FIRED_TRIGGERS (REQUESTS_RECOVERY);

CREATE INDEX IDX_QRTZ_FT_JOB_STATEFUL
   ON QRTZ_FIRED_TRIGGERS (IS_STATEFUL);

CREATE INDEX IDX_QRTZ_FT_TRIG_GROUP
   ON QRTZ_FIRED_TRIGGERS (TRIGGER_GROUP);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME
   ON QRTZ_FIRED_TRIGGERS (INSTANCE_NAME);

CREATE INDEX IDX_QRTZ_FT_TRIG_NAME
   ON QRTZ_FIRED_TRIGGERS (TRIGGER_NAME);

CREATE INDEX IDX_QRTZ_FT_TRIG_NM_GP
   ON QRTZ_FIRED_TRIGGERS (TRIGGER_NAME, TRIGGER_GROUP);

CREATE INDEX IDX_QRTZ_FT_TRIG_VOLATILE
   ON QRTZ_FIRED_TRIGGERS (IS_VOLATILE);

PROMPT
PROMPT Creating table QRTZ_JOB_LISTENERS
PROMPT =================================
PROMPT

CREATE TABLE QRTZ_JOB_LISTENERS
(
   JOB_NAME       VARCHAR2 (200) NOT NULL,
   JOB_GROUP      VARCHAR2 (200) NOT NULL,
   JOB_LISTENER   VARCHAR2 (200) NOT NULL
);

ALTER TABLE QRTZ_JOB_LISTENERS
  ADD PRIMARY KEY (JOB_NAME, JOB_GROUP, JOB_LISTENER)
  USING INDEX;
ALTER TABLE QRTZ_JOB_LISTENERS
  ADD FOREIGN KEY (JOB_NAME, JOB_GROUP)
  REFERENCES QRTZ_JOB_DETAILS (JOB_NAME, JOB_GROUP);

PROMPT
PROMPT Creating table QRTZ_LOCKS
PROMPT =========================
PROMPT

CREATE TABLE QRTZ_LOCKS (LOCK_NAME VARCHAR2 (40) NOT NULL);

ALTER TABLE QRTZ_LOCKS
  ADD PRIMARY KEY (LOCK_NAME)
  USING INDEX;

PROMPT
PROMPT Creating table QRTZ_PAUSED_TRIGGER_GRPS
PROMPT =======================================
PROMPT

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (TRIGGER_GROUP VARCHAR2 (200) NOT NULL);

ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS
  ADD PRIMARY KEY (TRIGGER_GROUP)
  USING INDEX;

PROMPT
PROMPT Creating table QRTZ_SCHEDULER_STATE
PROMPT ===================================
PROMPT

CREATE TABLE QRTZ_SCHEDULER_STATE
(
   INSTANCE_NAME       VARCHAR2 (200) NOT NULL,
   LAST_CHECKIN_TIME   NUMBER (13) NOT NULL,
   CHECKIN_INTERVAL    NUMBER (13) NOT NULL
);

ALTER TABLE QRTZ_SCHEDULER_STATE
  ADD PRIMARY KEY (INSTANCE_NAME)
  USING INDEX;

PROMPT
PROMPT Creating table QRTZ_SIMPLE_TRIGGERS
PROMPT ===================================
PROMPT

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
   TRIGGER_NAME      VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP     VARCHAR2 (200) NOT NULL,
   REPEAT_COUNT      NUMBER (7) NOT NULL,
   REPEAT_INTERVAL   NUMBER (12) NOT NULL,
   TIMES_TRIGGERED   NUMBER (10) NOT NULL
);

ALTER TABLE QRTZ_SIMPLE_TRIGGERS
  ADD PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP)
  USING INDEX;
ALTER TABLE QRTZ_SIMPLE_TRIGGERS
  ADD FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
  REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME, TRIGGER_GROUP);

PROMPT
PROMPT Creating table QRTZ_TRIGGER_LISTENERS
PROMPT =====================================
PROMPT

CREATE TABLE QRTZ_TRIGGER_LISTENERS
(
   TRIGGER_NAME       VARCHAR2 (200) NOT NULL,
   TRIGGER_GROUP      VARCHAR2 (200) NOT NULL,
   TRIGGER_LISTENER   VARCHAR2 (200) NOT NULL
);

ALTER TABLE QRTZ_TRIGGER_LISTENERS
  ADD PRIMARY KEY (TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER)
  USING INDEX;
ALTER TABLE QRTZ_TRIGGER_LISTENERS
  ADD FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP)
  REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME, TRIGGER_GROUP);


-- initialize --

CREATE TABLE ch2_locks (LOCK_NAME VARCHAR2 (40));

INSERT INTO ch2_locks
     VALUES ('SCHEDULER_OPERATION');

INSERT INTO ch2_locks
     VALUES ('OUTGOING_ARCHIVE');

INSERT INTO ch2_locks
     VALUES ('TIandTDLock');

INSERT INTO ch2_locks
     VALUES ('UPLOAD_OPERATION');


--audit tables
PROMPT
PROMPT Creating table RT_AUDIT_ACTION
PROMPT ==============================
PROMPT

CREATE TABLE RT_AUDIT_ACTION
(
   ID             VARCHAR2 (50) NOT NULL,
   TIMESTAMP      TIMESTAMP (6) NOT NULL,
   APP_NAME       VARCHAR2 (20) NOT NULL,
   USER_NAME      VARCHAR2 (100),
   ACTION         VARCHAR2 (100),
   CLIENT_IP      VARCHAR2 (20),
   SERVER_IP      VARCHAR2 (20),
   RESOURCE_OBJ   VARCHAR2 (100),
   AUD_OBJECT     VARCHAR2 (100),
   TOKEN          VARCHAR2 (100),
   THREAD         VARCHAR2 (100),
   SESSION_ID     VARCHAR2 (100)
);
create index RT_AUD_TIMESTAMP_IDX on RT_AUDIT_ACTION (TIMESTAMP);

CREATE INDEX RT_AUD_ACT_IDX
   ON RT_AUDIT_ACTION (ACTION);

CREATE UNIQUE INDEX RT_AUD_ID_IDX
   ON RT_AUDIT_ACTION (ID);

CREATE INDEX RT_AUD_SES_IDX
   ON RT_AUDIT_ACTION (SESSION_ID);

PROMPT
PROMPT Creating table RT_AUDIT_EXECUTION
PROMPT =================================
PROMPT

CREATE TABLE RT_AUDIT_EXECUTION
(
   ID               VARCHAR2 (50) NOT NULL,
   TIMESTAMP        TIMESTAMP (6) NOT NULL,
   APP_NAME         VARCHAR2 (20) NOT NULL,
   USER_NAME        VARCHAR2 (100),
   RESULT           VARCHAR2 (2048),
   EXECUTION_TIME   NUMBER
);
create index RT_AUE_TIMESTAMP_IDX on RT_AUDIT_EXECUTION (TIMESTAMP);

CREATE UNIQUE INDEX RT_AUE_ID_IDX
   ON RT_AUDIT_EXECUTION (ID);

PROMPT
PROMPT Creating table RT_METRICS
PROMPT =========================
PROMPT

CREATE TABLE RT_METRICS
(
   HOST                         VARCHAR2 (20) NOT NULL,
   TIMESTAMP                    TIMESTAMP (6) NOT NULL,
   THREADCOUNT                  NUMBER,
   UPTIME                       NUMBER,
   PROCESS_CPU_LOAD             NUMBER (10, 4),
   SYSTEM_CPU_LOAD              NUMBER (10, 4),
   MEMPHYSICALFREE              NUMBER,
   MEMPHYSICALTOTAL             NUMBER,
   MEMPHYSICALUSEDPERC          NUMBER,
   MEMVIRTUALCOMMITTED          NUMBER (10, 4),
   MEMVIRTUALCOMMITEDUSEDPERC   NUMBER (10, 4),
   SWAPSPACEFREE                NUMBER (10, 4),
   SWAPSPACETOTAL               NUMBER (10, 4),
   SWAPUSEDPERC                 NUMBER (10, 4),
   HEAPMEMORY                   NUMBER  
);

CREATE INDEX RT_MTR_MAIN_IDX
   ON RT_METRICS (HOST, TIMESTAMP);

PROMPT
PROMPT Creating table SELLINGCOMPANY_CONTENT
PROMPT =====================================
PROMPT

CREATE TABLE SELLINGCOMPANY_CONTENT
(
   CONTENT_ID           NUMBER (19) NOT NULL,
   SELLING_COMPANY_ID   NUMBER (19) NOT NULL
);

ALTER TABLE SELLINGCOMPANY_CONTENT ADD PRIMARY KEY (CONTENT_ID, SELLING_COMPANY_ID) USING INDEX;
ALTER TABLE SELLINGCOMPANY_CONTENT ADD CONSTRAINT FK_SELLINGCOMPANY_CONTSCID FOREIGN KEY (SELLING_COMPANY_ID) REFERENCES SELLING_COMPANY (ID);
ALTER TABLE SELLINGCOMPANY_CONTENT ADD CONSTRAINT FK_SELLINGCOMPANY_CONTCONTID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT_REPOSITORY (ID);

CREATE INDEX IDX_SCC_CONTENT_ID
   ON SELLINGCOMPANY_CONTENT (CONTENT_ID);

CREATE INDEX IDX_SCC_SELLING_COMPANY_ID
   ON SELLINGCOMPANY_CONTENT (SELLING_COMPANY_ID);

PROMPT
PROMPT Creating table TOURDEPARTURE_CONTENT
PROMPT ====================================
PROMPT

CREATE TABLE TOURDEPARTURE_CONTENT
(
   CONTENT_ID                 NUMBER (19) NOT NULL,
   TOURDEPARTURE_HISTORY_ID   NUMBER (19) NOT NULL
);

ALTER TABLE TOURDEPARTURE_CONTENT ADD PRIMARY KEY (CONTENT_ID, TOURDEPARTURE_HISTORY_ID) USING INDEX;
ALTER TABLE TOURDEPARTURE_CONTENT ADD CONSTRAINT FK_TOURDEPARTURE_CONTCONTID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT_REPOSITORY (ID);
ALTER TABLE TOURDEPARTURE_CONTENT ADD CONSTRAINT FK_TOURDEPARTURE_CONTTDHISTID FOREIGN KEY (TOURDEPARTURE_HISTORY_ID) REFERENCES TOURDEPARTURE_HISTORY (ID);

CREATE INDEX IDX_TDC_CONTENT_ID
   ON TOURDEPARTURE_CONTENT (CONTENT_ID);

CREATE INDEX IDX_TDC_HISTORY_ID
   ON TOURDEPARTURE_CONTENT (TOURDEPARTURE_HISTORY_ID);


PROMPT
PROMPT Creating table TOURINFO_CONTENT
PROMPT ===============================
PROMPT

CREATE TABLE TOURINFO_CONTENT
(
   CONTENT_ID            NUMBER (19) NOT NULL,
   TOURINFO_HISTORY_ID   NUMBER (19) NOT NULL
);

ALTER TABLE TOURINFO_CONTENT ADD PRIMARY KEY (CONTENT_ID, TOURINFO_HISTORY_ID) USING INDEX;
ALTER TABLE TOURINFO_CONTENT ADD CONSTRAINT FK_TOURINFO_CONTCONTID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT_REPOSITORY (ID);
ALTER TABLE TOURINFO_CONTENT ADD CONSTRAINT FK_TOURINFO_CONTTIHID FOREIGN KEY (TOURINFO_HISTORY_ID) REFERENCES TOURINFO_HISTORY (ID);

CREATE INDEX IDX_TIC_CONTENT_ID
   ON TOURINFO_CONTENT (CONTENT_ID);

CREATE INDEX IDX_TIC_HISTORY_ID
   ON TOURINFO_CONTENT (TOURINFO_HISTORY_ID);

PROMPT
PROMPT Creating table UPLOAD_STATUS
PROMPT ============================
PROMPT

CREATE TABLE UPLOAD_STATUS
(
   ID                NUMBER (19) NOT NULL,
   VERSION           NUMBER (19),
   BRAND_CODE        VARCHAR2 (30 CHAR),
   COUNT_FILES       NUMBER (10),
   FILE_NAME_DESC    VARCHAR2 (500 CHAR),
   MESSAGE           VARCHAR2 (300 CHAR),
   TYPEMSG           VARCHAR2 (255 CHAR),
   CURRENT_FILE_NR   NUMBER (10)
);

ALTER TABLE UPLOAD_STATUS ADD PRIMARY KEY (ID) USING INDEX;

CREATE INDEX IDX_UPS_BRAND_CODE
   ON UPLOAD_STATUS (BRAND_CODE);

PROMPT
PROMPT Creating table USER_BRAND
PROMPT =========================
PROMPT

CREATE TABLE USER_BRAND
(
   USER_ID    NUMBER (19) NOT NULL,
   BRAND_ID   NUMBER (19) NOT NULL
);

ALTER TABLE USER_BRAND ADD PRIMARY KEY (USER_ID, BRAND_ID) USING INDEX;
ALTER TABLE USER_BRAND ADD CONSTRAINT FK_USER_BRAND_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID);
ALTER TABLE USER_BRAND ADD CONSTRAINT FK_USER_BRAND_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_USB_BRAND_ID
   ON USER_BRAND (BRAND_ID);

CREATE INDEX IDX_USB_USER_ID
   ON USER_BRAND (USER_ID);

PROMPT
PROMPT Creating table XML_CONTENT_REPOSITORY
PROMPT =====================================
PROMPT

CREATE TABLE XML_CONTENT_REPOSITORY
(
   ID                      NUMBER (19) NOT NULL,
   VERSION                 NUMBER (19),
   OLD_TOURDEPARTURE_XML   CLOB,
   OLD_TOURINFO_XML        CLOB,
   TOURDEPARTURE_XML       CLOB,
   TOURINFO_XML            CLOB,
   CONTENT_REPOSITORY_ID   NUMBER (19)
);

ALTER TABLE XML_CONTENT_REPOSITORY ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE XML_CONTENT_REPOSITORY ADD CONSTRAINT FK_XML_CONTENT_REP_CRID FOREIGN KEY (CONTENT_REPOSITORY_ID) REFERENCES CONTENT_REPOSITORY (ID);

CREATE INDEX IDX_XCR_ID
   ON XML_CONTENT_REPOSITORY (CONTENT_REPOSITORY_ID);

PROMPT
PROMPT Creating table ZIP_FILE_COLLECT
PROMPT =====================================
PROMPT

CREATE TABLE ZIP_FILE_COLLECT
(
   ID                    NUMBER (19) NOT NULL,
   VERSION               NUMBER (19),
   FILE_COLLECT_ZIP_V1   BLOB NOT NULL,
   FILE_COLLECT_ZIP_V3   BLOB NOT NULL
);

ALTER TABLE ZIP_FILE_COLLECT ADD PRIMARY KEY (ID) USING INDEX;

PROMPT
PROMPT Creating table FILE_COLLECT
PROMPT =====================================
PROMPT

CREATE TABLE FILE_COLLECT
(
   ID                   NUMBER (19) NOT NULL,
   VERSION              NUMBER (19),
   FILE_MD5_V1          VARCHAR2 (32 CHAR) NOT NULL,
   FILE_MD5_V3          VARCHAR2 (32 CHAR) NOT NULL,
   FILE_MODIFIED        TIMESTAMP (6) NOT NULL,
   FILE_NAME            VARCHAR2 (255 CHAR) NOT NULL,
   BRAND_ID             NUMBER (19) NOT NULL,
   ZIP_FILE_COLLECT     NUMBER (19) NOT NULL,
   SELLING_COMPANY_ID   NUMBER (19) NOT NULL
);

ALTER TABLE FILE_COLLECT ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE FILE_COLLECT ADD CONSTRAINT FK_FILE_COLLECT_SC_ID FOREIGN KEY (SELLING_COMPANY_ID) REFERENCES SELLING_COMPANY (ID);
ALTER TABLE FILE_COLLECT ADD CONSTRAINT FK_FILE_COLLECT_ZIP_ID FOREIGN KEY (ZIP_FILE_COLLECT)  REFERENCES ZIP_FILE_COLLECT (ID);
ALTER TABLE FILE_COLLECT ADD CONSTRAINT FK_FILE_COLLECT_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_FC_FILE_MD5_V1
   ON FILE_COLLECT (FILE_MD5_V1);

CREATE INDEX IDX_FC_FILE_MD5_V3
   ON FILE_COLLECT (FILE_MD5_V3);

CREATE INDEX IDX_FC_BRAND_ID
   ON FILE_COLLECT (BRAND_ID);

CREATE INDEX IDX_FC_SELLING_COMPANY_ID
   ON FILE_COLLECT (SELLING_COMPANY_ID);

CREATE INDEX IDX_FC_ZIP_FILE_COLLECT
   ON FILE_COLLECT (ZIP_FILE_COLLECT);

PROMPT
PROMPT Creating table TOURINFO_TRANSFER
PROMPT =====================================
PROMPT

CREATE TABLE TOURINFO_TRANSFER
(
   ID                    NUMBER (19) NOT NULL,
   VERSION               NUMBER (19),
   IS_DOWNLOAD_ENABLED   NUMBER (1) NOT NULL,
   IS_UPLOAD_ENABLED     NUMBER (1) NOT NULL,
   BRAND_ID              NUMBER (19) NOT NULL
);

ALTER TABLE TOURINFO_TRANSFER ADD PRIMARY KEY (ID) USING INDEX;
ALTER TABLE TOURINFO_TRANSFER ADD CONSTRAINT FK_TOURINFO_TRANS_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

PROMPT
PROMPT Creating sequence CH2_GLOBAL_SEQ
PROMPT ================================
PROMPT

CREATE SEQUENCE CH2_GLOBAL_SEQ MINVALUE 1
                               MAXVALUE 9999999999999999999999999999
                               START WITH 1
                               INCREMENT BY 1
                               CACHE 20;


-- Create table: IMPORT_STATUS with column comments

CREATE TABLE IMPORT_STATUS
(
   "ID"            NUMBER (19, 0) NOT NULL ENABLE,
   "VERSION"       NUMBER (19, 0),
   "BRAND_CODE"    VARCHAR2 (30 CHAR),
   "MESSAGE"       VARCHAR2 (300 CHAR),
   "TYPEMSG"       VARCHAR2 (255 CHAR),
   "DATE_UPDATE"   TIMESTAMP (6) NOT NULL ENABLE,
   PRIMARY KEY ("ID")
);

-- Add comments to the table
COMMENT ON TABLE IMPORT_STATUS IS 'Snapshot of import tour departure';
-- Add comments to the columns
COMMENT ON COLUMN IMPORT_STATUS.ID IS
   'Primary Key of this table. Generated by sequence - CH2_GLOBAL_SEQ';
COMMENT ON COLUMN IMPORT_STATUS.VERSION IS 'Version used in optimistc locks';
COMMENT ON COLUMN IMPORT_STATUS.BRAND_CODE IS 'Brand code.';
COMMENT ON COLUMN IMPORT_STATUS.MESSAGE IS 'Message of snapshot';
COMMENT ON COLUMN IMPORT_STATUS.TYPEMSG IS 'Type of message';
COMMENT ON COLUMN IMPORT_STATUS.DATE_UPDATE IS 'Date of snapshot';

CREATE INDEX IDX_IPS_BRAND_CODE
   ON IMPORT_STATUS (BRAND_CODE);

CREATE INDEX IDX_IPS_DATE_UPDATE
   ON IMPORT_STATUS (DATE_UPDATE);

-- Create table: TIBLOB_DATA with column comments

CREATE TABLE TIBLOB_DATA
(
   "ID"        NUMBER (19, 0) NOT NULL ENABLE,
   "VERSION"   NUMBER (19, 0),
   "DATA"      BLOB,
   PRIMARY KEY ("ID")
);

   -- Add comments to the table
COMMENT ON TABLE TIBLOB_DATA IS 'Table to store uploaded files';
-- Add comments to the columns
COMMENT ON COLUMN TIBLOB_DATA.ID IS
   'Primary Key of this table. Generated by sequence - CH2_GLOBAL_SEQ';
COMMENT ON COLUMN TIBLOB_DATA.VERSION IS 'Version used in optimistc locks';
COMMENT ON COLUMN TIBLOB_DATA.DATA IS 'Uploaded zip file';


-- Alter on table: UPLOAD_STATUS
ALTER TABLE UPLOAD_STATUS ADD (DATE_UPDATE TIMESTAMP (6));

ALTER TABLE UPLOAD_STATUS
   MODIFY ( DATE_UPDATE NOT NULL ENABLE );

ALTER TABLE UPLOAD_STATUS
   MODIFY MESSAGE VARCHAR2 (3000 CHAR);

ALTER TABLE UPLOAD_STATUS
   MODIFY FILE_NAME_DESC VARCHAR2 (500 CHAR);


-- Add comments to the table
COMMENT ON TABLE UPLOAD_STATUS IS 'Snapshot of upload tour info';
-- Add comments to the columns
COMMENT ON COLUMN UPLOAD_STATUS.ID IS
   'Primary Key of this table. Generated by sequence - CH2_GLOBAL_SEQ';
COMMENT ON COLUMN UPLOAD_STATUS.VERSION IS 'Version used in optimistc locks';
COMMENT ON COLUMN UPLOAD_STATUS.DATE_UPDATE IS 'Date of snapshot';



-- Alter on table: TOURINFO_HISTORY
ALTER TABLE TOURINFO_HISTORY ADD ("ZIP_ATTACHED" NUMBER(1,0),"ZIP_DATA_ID" NUMBER(19,0));
ALTER TABLE TOURINFO_HISTORY DROP COLUMN PATH;

CREATE INDEX IDX_TI_ZIP_ATTACHED
   ON TOURINFO_HISTORY (ZIP_ATTACHED);

ALTER TABLE TOURINFO_HISTORY
   ADD USER_ID NUMBER (19);

CREATE INDEX IDX_TI_USER_ID
   ON TOURINFO_HISTORY (USER_ID);


-- Alter on table: EMAIL_HISTORY
ALTER TABLE EMAIL_HISTORY ADD ("BRAND_ID" NUMBER(19,0));
ALTER TABLE EMAIL_HISTORY ADD CONSTRAINT FK_EMAIL_HISTORY_BRAND_ID FOREIGN KEY (BRAND_ID) REFERENCES BRAND (ID);

CREATE INDEX IDX_EMH_BRAND_ID
   ON EMAIL_HISTORY (BRAND_ID);

ALTER TABLE QUARTZ_JOB DROP COLUMN JOB_NAME;

ALTER TABLE QUARTZ_JOB
   ADD JOB_NAME VARCHAR2 (60 CHAR) NOT NULL;

ALTER TABLE QUARTZ_JOB
   ADD USER_ID NUMBER (19);

CREATE INDEX IDX_QJ_USER_ID
   ON QUARTZ_JOB (USER_ID);


ALTER TABLE IMPORT_STATUS
   ADD PROCESSLEVEL VARCHAR2 (20 CHAR) NOT NULL;

ALTER TABLE QUARTZ_JOB_HISTORY
   ADD BRAND_ID NUMBER (19);

CREATE INDEX IDX_QJH_BRAND_ID
   ON QUARTZ_JOB_HISTORY (BRAND_ID);

ALTER TABLE TOURDEPARTURE_HISTORY
   ADD BRAND_ID NUMBER (19);

CREATE INDEX IDX_TDH_BRAND_ID
   ON TOURDEPARTURE_HISTORY (BRAND_ID);

CREATE INDEX IDX_IPS_PROCESSLEVEL
   ON IMPORT_STATUS (PROCESSLEVEL);

INSERT INTO qrtz_locks
     VALUES ('TRIGGER_ACCESS');

INSERT INTO qrtz_locks
     VALUES ('JOB_ACCESS');

INSERT INTO qrtz_locks
     VALUES ('CALENDAR_ACCESS');

INSERT INTO qrtz_locks
     VALUES ('STATE_ACCESS');

INSERT INTO qrtz_locks
     VALUES ('MISFIRE_ACCESS');

INSERT INTO qrtz_locks
     VALUES ('SCHEDULER_OPERATION');

SPOOL OFF;