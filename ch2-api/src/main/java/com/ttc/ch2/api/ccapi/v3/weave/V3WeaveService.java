package com.ttc.ch2.api.ccapi.v3.weave;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.ttc.ch2.api.ccapi.v3.GetTourDetailsFullRequest;
import com.ttc.ch2.api.ccapi.v3.GetTourDetailsFullResponse;
import com.ttc.ch2.api.ccapi.v3.ObjectFactory;
import com.ttc.ch2.api.ccapi.v3.tourdepartures._2013._09._2_5.SellingCompanyType;
import com.ttc.ch2.api.ccapi.v3.tourdepartures._2013._09._2_5.TourDeparturesType;
import com.ttc.ch2.api.ccapi.v3.tourinfo._2014._01._3.SellingCompany;
import com.ttc.ch2.api.ccapi.v3.tourinfo._2014._01._3.TourInfo;
import com.ttc.ch2.bl.contentrepository.ContentRepositoryService;
import com.ttc.ch2.common.SecurityHelper;
import com.ttc.ch2.domain.tour.ContentRepository;
import com.ttc.util.ext.V3MT;
import com.ttc.util.messages.Message;
import com.ttc.util.messages.MessageBuilder;
import com.ttc.util.ws.MessagesUtil;

/**
 * <p> This is the main end-point of Version 3 of Consolidated Content API (CCAPIv3).
 * 
 * <p> Authentication: 
 * <li> All call to CCAPI are authenticated with use of token that is generated by the systems administrators.
 * <li> Each of the methods contains @securityKey field that has to be populated with the token assigned with the API user account,
 *      and @sellingCompanies that gives access to specific companies content data.
 * 
 * @see [..host and service..]/ccapi/v3/CCAPIv3.wsdl
 */

@Service
public class V3WeaveService {

	private static final Logger logger = LoggerFactory.getLogger(V3WeaveService.class);	
    private static final Logger activityLogger = LoggerFactory.getLogger("ch2.activity.ConsolidatedContentAPIv3");

	private JAXBContext jcTI;
	private JAXBContext jcTD;

	@Inject
	private ContentRepositoryService contentRepositoryService;

	@PostConstruct
	public void init() throws JAXBException {

		//Map<String, Object> properties = new HashMap<String, Object>();
		//properties.put(JAXBContextProperties.MEDIA_TYPE, "application/json");
		//properties.put(JAXBContextProperties.JSON_INCLUDE_ROOT, false);

		/*
		Map<String, StreamSource> oxm = new HashMap<String, StreamSource>(1);
        oxm.put("com.ttc.ch2.api.ccapi.v3.tourinfo._2014._01._3", new StreamSource(com.ttc.ch2.api.ccapi.v3.tourinfo._2014._01._3.Text.class.getResourceAsStream("oxm.xml")));
 
        Map<String, Map<String, StreamSource>> properties =
                new HashMap<String, Map<String, StreamSource>>();
        properties.put("eclipselink-oxm-xml", oxm);
        */
		jcTI = JAXBContext.newInstance(new Class[] { TourInfo.class });
		jcTD = JAXBContext.newInstance(new Class[] { TourDeparturesType.class });

	}

	/**
	 * <p> This method retrieves full Tour Info and Tour Departure data in the original xml format stored in Content Repository under the @tourCode.
	 * 
	 * @param request tourCode
	 * @return full Tour Info and Tour Departure xml
	 * @throws JAXBException
	 */
	public GetTourDetailsFullResponse getTourDetailsFull(GetTourDetailsFullRequest request)  {

		ObjectFactory of = new ObjectFactory();
		GetTourDetailsFullResponse response = of.createGetTourDetailsFullResponse();

		if (StringUtils.isBlank(request.getTourCode())) {
			MessagesUtil.assignContext(response, MessageBuilder.newMessage(V3MT.NO_TOUR).build());
			return response;
		}
		 
//        Collection<Message> messages = new ArrayList<>();
		try {
			Unmarshaller jaxbTIUnmarshaller = jcTI.createUnmarshaller();
			Unmarshaller jaxbTDUnmarshaller = jcTD.createUnmarshaller();
			ContentRepository cr = contentRepositoryService.getContentRepositoryForTourcodeAndSC(request.getTourCode(), request.getSellingCompany());
			if(cr == null) {
			    
                com.ttc.util.messages.Message message = MessageBuilder.newMessage(V3MT. NO_TOUR)
                        .build();
                MessagesUtil.assignContext(response, message);
		        
				return response;
			}
			
			Map<String, Object> properties = new HashMap<String, Object>();
			
			// InputStreamReader isrTI = new InputStreamReader(new ByteArrayInputStream(cr.getXmlContentRepository().get(0).getTourInfoXML().getBytes("UTF-8")));
	        // XMLEventReader xerTI = XMLInputFactory.newInstance().createXMLEventReader(isrTI);
			StreamSource tiXml = new StreamSource(new ByteArrayInputStream(cr.getXmlContentRepository().get(0).getTourInfoXML().getBytes("UTF-8")));
			TourInfo ti = (TourInfo) jaxbTIUnmarshaller.unmarshal(tiXml, TourInfo.class).getValue();
			List<SellingCompany> toDelete = new ArrayList<SellingCompany>();
			for(SellingCompany sc: ti.getSellingCompanies().getSellingCompany()) {
				if(!sc.getCode().equals(request.getSellingCompany())) {
					toDelete.add(sc);
				}
			}
			ti.getSellingCompanies().getSellingCompany().removeAll(toDelete);
			
			// InputStreamReader isrTD = new InputStreamReader(new ByteArrayInputStream(cr.getXmlContentRepository().get(0).getTourDepartureXML().getBytes("UTF-8")));
			// XMLEventReader xerTD = XMLInputFactory.newInstance().createXMLEventReader(isrTD);
			StreamSource tdXml = new StreamSource(new ByteArrayInputStream(cr.getXmlContentRepository().get(0).getTourDepartureXML().getBytes("UTF-8")));
			TourDeparturesType td = (TourDeparturesType) jaxbTDUnmarshaller.unmarshal(tdXml, TourDeparturesType.class).getValue();
			
			
			List<SellingCompanyType> toDelete2 = new ArrayList<SellingCompanyType>();
			for(SellingCompanyType sc: td.getSellingCompanies().getSellingCompany()) {
				if(!sc.getCode().equals(request.getSellingCompany())) {
					toDelete2.add(sc);
				}
			}
			td.getSellingCompanies().getSellingCompany().removeAll(toDelete2);
			if(td.getSellingCompanies().getSellingCompany().size() == 0 || ti.getSellingCompanies().getSellingCompany().size() == 0) {

                com.ttc.util.messages.Message message = MessageBuilder.newMessage(V3MT. NO_TOUR)
                        .build();
                
                MessagesUtil.assignContext(response, message);
				return response;
			}
			
			response.setTourInfo(ti);
			response.setTourDepartures(td);
			
			MessagesUtil.assignContext(response, (Collection<Message>) null);

            activityLogger.info("USER: {}  called getTourDetailsFull", SecurityHelper.getLoginSilent());
			response.setSuccessful(true);
		}catch(Exception e) {
		    logger.error("Cannot get details of IT/TD", e);
			response.setSuccessful(false);

            com.ttc.util.messages.Message message = MessageBuilder.newMessage(V3MT. NO_TOUR)
                    .build();

            MessagesUtil.assignContext(response, message);
		}

        
		return response;
	}
	
}
