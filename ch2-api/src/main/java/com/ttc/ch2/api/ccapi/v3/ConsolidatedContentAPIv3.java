package com.ttc.ch2.api.ccapi.v3;

import javax.inject.Inject;
import javax.jws.WebService;
import javax.xml.bind.JAXBException;

import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.Namespace;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import com.ttc.ch2.api.ccapi.v3.weave.V3WeaveService;
import com.ttc.ch2.bl.upload.SnapshotUploadService;
import com.ttc.ch2.bl.upload.UploadTourInfoService;
import com.ttc.ch2.brox.service.BrochureService;
import com.ttc.ch2.search.services.SearchService;

/**
 * <p> This is the main end-point of Version 3 of Consolidated Content API (CCAPIv3).
 * 
 * <p> Authentication: 
 * <li> All call to CCAPI are authenticated with use of token that is generated by the systems administrators.
 * <li> Each of the methods contains @securityKey field that has to be populated with the token assigned with the API user account,
 *      and @sellingCompanies that gives access to specific companies content data.
 * 
 * @see [..host and service..]/ccapi/v3/CCAPIv3.wsdl
 */
@Endpoint
@WebService // required for automated documentation only
//@WSDLDocumentation("A very simple example of an SEI") // given by Apache CXF
public class ConsolidatedContentAPIv3 {

	private static final String TARGET_NAMESPACE = "http://www.ttc.com/ch2/api/ccapi/v3";
	@Inject
	private UploadTourInfoService uploadService;

	@Inject
	private BrochureService brochureService;

	@Inject 
	private SearchService searchService;
	
	@Inject
	private SnapshotUploadService snapshotUploadService;
	
	@Inject
	private V3WeaveService service;

	/**
	 * <p>This method allows Tour Info (TI) package upload.
	 * 
	 * <p>TI must be zipped and base64 converted. 
	 *  
	 * <p>There is 'all or nothing' approach to TI upload and processing. 
	 * If for any reason the process validation fails an error is generated and the package is received to be stored in Content Hub.
	 * 
	 * <p>Validations:
	 * <li> Schema check
	 * <li> Single brand allowed check
	 * <li> Product code check
	 * <li> Locations check
	 * <li> Contiguity check -- warning level only
	 * 
	 * @param request 
	 * <li> securityKey
	 * <li> fileName
	 * <li> fileData (base64 encoded binary data)
	 * 
	 * @return
	 * <li> status of upload procedure
	 * 
	 * <p>
	 * <p>Error Codes: 
	 * <li> ERR-1000: Unexpected problem occured
	 * <li> ERR-1001: Tourcode: {0} is not equal to
	 * <li> ERR-1002: BRAND code:{0} was not found in the system Brand table (Zip file name:{1})
	 * <li> ERR-1003: SellingCompanies were not found in the system SellingCompany table for tour code:{0} 
	 * <li> ERR-1004: Schema validation error in file:{0}, xsd message:{1} 
	 * <li> ERR-1005E: Incorrect Zip file {0} or Zip file is empty!
	 * <li> ERR-1006: Brand {0} - Other file is being currently uploaded or brand is being processed by Tour Departure import. Please wait till end of processing and try again.
	 * <li> ERR-1007: System can't find brand code
	 * <li> ERR-1008: Process has registred BRAND code:{0} (brand code from first correct file) and found file with diffrent brand Code:{1} for tour code:{2}
	 * <li> ERR-1009: Incorrect file name:{0} ,reason : {1}
	 * <li> ERR-1010: File upload problem file:{0} â€“ a file already exists with name:{0}
	 * <li> ERR-1011: Incorrect zip file name:{0}
	 * <li> ERR-1021: Permission denied for brand:{0} [file name:{1}]
	 * <li> ERR-1013: Permission denied for brand:{0} [zip file name:{1}]
	 * <li> ERR-1014: ermission denied for Selling companies:{0} [file name:{1}]
	 * <li> ERR-1015: Found problems while uploading tour info xml with nested files
	 * <li> ERR-1016: File upload problem â€“ file: {0} â€“ File name {0}  is not correct length - 27 characters expected
	 * <li> ERR-1017: Following SellingCompanies ({0}) were not found in selected Brand:{1}
	 * <li> ERR-1018: Zip has a direcotry
	 * <li> ERR-1019: Error during automatic upload to CH1.0 machine
	 * <li> WRN-2002: Ch1 upload is disabled
	 * <li> WRN-2003: Elastic search indexing is disabled
	 * <li> WRN-2004: Files with invalid ItinerarySegment(s) StartDay/Duration values:\n{0}
	 *  
	 */
	@PayloadRoot(localPart = "UploadTourInfoRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri = TARGET_NAMESPACE)
	public @ResponsePayload UploadTourInfoResponse uploadTourInfo(@RequestPayload UploadTourInfoRequest request){
	    UploadTourInfoResponse response = uploadService.addApiUploadTourInfoFile(request);
		return response;
	}

	/**
	 * <p>This method accesses eBrochure engine.
	 * 
	 * @param request 
	 * <li> securityKey
	 * <li> title
	 * <li> brandCode
	 * <li> sellingCompanyCod
	 * <li> agentText
	 * <li> agentImage
	 * <li> <list> tour (tour codes)
	 * 
	 * @return 
	 * <li> an object representing a brochure as a pdf file titled with a fileName 
	 */
	@PayloadRoot(localPart = "GetBrochureRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri = TARGET_NAMESPACE)
	public @ResponsePayload GetBrochureResponse getBrochure(@RequestPayload GetBrochureRequest request) {
	    GetBrochureResponse response = brochureService.getBrochure(request);
		return response;
	}

	/**
	 * <p>This method retrieves collected tour categories for given sellingCompany.
	 * 
	 * @param request
	 *  <li> securityKey
	 *  <li> sellingCompany
	 * @return
	 * <li> a list of the different types style of tours for each of the related Brands
	 */
	@PayloadRoot(localPart = "GetTourCategoriesRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri = TARGET_NAMESPACE)
	public @ResponsePayload GetTourCategoriesResponse getTourCategories(@RequestPayload GetTourCategoriesRequest request) {
	    GetTourCategoriesResponse response = searchService.getTourCategories(request);
		return response;
	}

	/**
	 * <p> This method retrieves all the continents and countries a particular selling company travels to.
	 * 
	 * Uses the locations visited section of the Tour Info files to identify all the countries and continents visited for a single or group of selling companies.
	 * 
	 * @param request
	 * <li> securityKey
	 * <li> continent
	 * <li> <list> sellingCompanies
	 * 
	 * @return 
	 * <li> Continent first then a list of all the countries visited in that continent.
	 */
	@PayloadRoot(localPart = "GetContinentsAndCountriesVisitedRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri = TARGET_NAMESPACE)
	public @ResponsePayload GetContinentsAndCountriesVisitedResponse getContinentsAndCountriesVisited(@RequestPayload GetContinentsAndCountriesVisitedRequest request) {
	    GetContinentsAndCountriesVisitedResponse response = searchService.getContinentsAndCountriesVisited(request);
		return response;
	}

	/**
	 * <p> This method gives search functionality on Tour Info and Tour Departures data collected in Content Repository.
	 * 
	 * <p> General search parameters rules:
	 * <li> The search checks whole TIv3 and TDv3 per Selling Company.
	 * <li> All search parameters produce filters that results are intersected, except the list of Selling Companies that are added together (union), and have to be added in different sub-nodes.
	 * <li> List delimiters:
	 * (a) Comma ',' means 'and', so filtered results are intersected, 
	 * (b) Space ' ' means 'or', so filtered results are added together,  
	 * (c) Text between double-quotes '"' means that above delimiters (comma and space) are switched off and are being a subject of the search (so called exact-match).
	 * <li> Empty parameters are treated as null and are not considered in search results 
	 * 
	 * <p> Specific rules: 
	 * <li> Currently double-quotes are supported only for <KeywordsandPhrases>.
	 * <li> Additional sub-nodes are supported only for Selling Companies and <KeywordsandPhrases> parameters.
	 * 
	 * <p> Nomenclature:
	 * <li> Union, 'or' -- two or more sets can be added together
	 * <li> Intersection, 'and' -- gives a set of all things that are members of two or many sets
	 * 
	 * @param request
	 * <li> securityKey
	 * <li> <list> sellingCompanies
	 * <li> <required> firstRecordNumber, numberOfRecords
	 * <li> continentCodes, countryCodes
	 * <li> durationFrom, durationTo
	 * <li> months, values in 1..12
	 * <li> <list> keywordsAndPhrases
	 * <li> preferedRoomType
	 * <li> priceFrom, priceTo
	 * <li> orderBy, orderDirection;
	 * 
	 * @return
	 * <li> further descriptive content about an individual tour product along with departures, further pricing and availability data
	 */
	@PayloadRoot(localPart = "SearchToursRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri=TARGET_NAMESPACE)
	public @ResponsePayload SearchToursResponse searchTours(@RequestPayload SearchToursRequest request) {
	    SearchToursResponse response = searchService.searchTours(request);
		return response;
	}

	/**
	 * <p> This method gives search functionality on Tour Info and Tour Departures data collected in Content Repository, @see searchTours.
	 * 
	 * <p> All results are aggregated per Tour Info CataloguedCode.
	 * 
	 * @param request
	 * <li> securityKey
	 * <li> <list> sellingCompanies
	 * <li> <required> firstRecordNumber, numberOfRecords
	 * <li> continentCodes, countryCodes
	 * <li> durationFrom, durationTo
	 * <li> months, values in 1..12
	 * <li> <list> keywordsAndPhrases
	 * <li> preferedRoomType
	 * <li> priceFrom, priceTo
	 * <li> orderBy, orderDirection;
	 * 
	 * @return
	 * <li> segregated by catalogue codes, a compressed set of results to those returned in the SearchTours request 
	 */ 
	@PayloadRoot(localPart = "SearchToursAggregatedRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri=TARGET_NAMESPACE)
	public @ResponsePayload SearchToursAggregatedResponse searchToursAggregated(@RequestPayload SearchToursAggregatedRequest request) {
	    SearchToursAggregatedResponse response = searchService.searchToursAggregated(request);	
		return response;
	}

	/**
	 * <p> This method retrieves Tour Info and Tour Departure data limited to single selling company in format stored in Content Repository under the @tourCode.
	 * 
	 * @param request 
	 *  <li> securityKey
	 *  <li> sellingCompany
	 *  <li> tourCode
	 * @return 
	 * <li> returns further descriptive content about an individual tour product along with departures, further pricing and availability data
	 */
	@PayloadRoot(localPart = "GetTourDetailsFullRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri=TARGET_NAMESPACE)
	public @ResponsePayload GetTourDetailsFullResponse getTourDetailsFull(@RequestPayload GetTourDetailsFullRequest request)  {
	   return service.getTourDetailsFull(request);
	}
	
	
	/**
	 * <p> This method retrieves full Tour Info and Tour Departure data in the original xml format stored in Content Repository under the @tourCode.
	 * 
	 * @param request tourCode
	 * @return full Tour Info and Tour Departure xml
	 * @throws JAXBException
	 */
	@PayloadRoot(localPart = "GetTourDataUploadStatusRequest", namespace = TARGET_NAMESPACE)
	@Namespace(prefix = "v3", uri=TARGET_NAMESPACE)
	public @ResponsePayload GetTourDataUploadStatusResponse getSnapshotUploadTour(@RequestPayload GetTourDataUploadStatusRequest request) {
		return snapshotUploadService.getSnapshotUploadTour(request);
	}
	
}
